Call: /usr/bin/ruby ../scripts/param_ils_2_3_run.rb "-numRun" "0" "-approach" "focused" "-userunlog" "1" "-validN" "0" "-pruning" "0" "-maxEvals" "1000" "-scenariofile" "scn/SolveVRP.scn"


seed: 1234
algo: bash SolveVRP.sh
tunerTimeout (CPU time): 100000000.0
maxWallTime: 8640000.0
maxEvals: 1000
run_obj: runlength
overall_obj: mean
instance_file: inst/SolveVRP.inst
test_instance_file: inst/SolveVRP.inst
N: 2000
cutoff_time: 1000000000.0
cutoff_length: 2147483647
R: 10
pertubation_strength_basic: 
pertubation_strength_scaling: false
p_restart: 0.01
Run 1
Level 
========================================================
Starting ILS for level 1, i.e. a limit of N=2000, and cutoff time=1000000000.0.
Current CPU time = 0, this run goes until 100000000.0 
========================================================
New Incumbent: 0, 100000000 [0, 0]. With state gs=25, ps=10
 Same incumbent, new precision:
New Incumbent: 0.1, 8273.0 [1, 1000000000.0]. With state gs=25, ps=10
          -> Take improving step to random gs=45 ps=20 (8273.0 [based on 1 runs with cutoff 1000000000.0])

State wants more detail (1+1) than incumbent (1), doing incumbent first:
gs=45 ps=20 (8273.0 [based on 1 runs with cutoff 1000000000.0])
gs=25 ps=10 (8273.0 [based on 1 runs with cutoff 1000000000.0])
 Same incumbent, new precision:
New Incumbent: 0.30000000000000004, 8273.0 [2, 1000000000.0]. With state gs=25, ps=10
          -> Take improving step to random gs=25 ps=10 (8273.0 [based on 2 runs with cutoff 1000000000.0])

          -> Take improving step to random gs=25 ps=20 (8273.0 [based on 2 runs with cutoff 1000000000.0])

          -> Take improving step to random gs=35 ps=20 (8273.0 [based on 2 runs with cutoff 1000000000.0])

